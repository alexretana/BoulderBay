{"version":3,"sources":["Components/gymMarker.js","Components/GMap.js","Components/InfoBar.js","Components/Form.js","App.js","index.js"],"names":["GymMarker","lat","lng","onHover","ginfo","content","className","href","data-toggle","title","style","color","xmlns","width","height","fill","class","viewBox","d","GMap","eventData","locMarkers","i","Object","keys","gInfo","name","rating","push","geoLoc","Markers","bootstrapURLKeys","key","defaultCenter","defaultZoom","map","ev","defaultProps","center","zoom","InfoBar","gym_data","googleInfo","correct_name","repeat","gym_info","UserForm","search_results","useState","search","setSearch","filtered_data","setfiltered_data","useEffect","data","console","log","position","float","overflow","background","padding","type","onChange","e","target","value","placeholder","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8da0e24f.chunk.js","sourcesContent":["\nexport default function GymMarker({ lat, lng, onHover, ginfo }) {\n    const marker = {\n        color: \"red\"\n    }\n\n                \n                const content = `${ginfo[\"name\"]} \\n  ${ginfo[\"rating\"] }`\n    return (\n\n        <div className=\"gym-marker\" onHover={onHover}>\n           \n\n        <a href=\"#\" data-toggle=\"tooltip\" title={content}>\n        <svg style={marker} xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"30\" fill=\"currentColor\" class=\"bi bi-geo-alt-fill\" viewBox=\"0 0 16 16\">\n                    <path d=\"M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z\" />\n                </svg>\n        </a>\n\n        </div>\n    )\n}\n","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport GymMarker from './gymMarker'\n\n// define constants\n\nconst GMap = ({eventData}) => {\n    \n    let center = {lat: 38.54555438314078,\n        lng: -97.9853579502318}\n    const zoom = 8\n    const mapBoxStyle = {\n        width: \"100%\",\n        height: \"100vh\",\n    }\n    \n    // find avg lat and lng to center search\n    const avg_loc = (data) => {\n        let avg_GeoLoc = {}\n        Object.keys(data).map( key =>{\n            // console.log(data[key]['googleInfo']['geoLoc'])\n            Object.assign(avg_GeoLoc,data[key]['googleInfo']['geoLoc'])\n        })\n        console.log(avg_GeoLoc)\n        return avg_GeoLoc\n    }\n    // center = avg_loc(eventData)\n    \n    // create array and to add name, rating and geoLoc\n    const locMarkers = []\n    const Markers = () => {\n        for (const i in Object.keys(eventData)) {\n            // console.log(eventData[Object.keys(eventData)[i]])\n            const gInfo = eventData[Object.keys(eventData)[i]]['googleInfo']\n\n            const lat = gInfo['geoLoc'][0]\n            const lng = gInfo['geoLoc'][1]\n            const name = gInfo['correct_name']\n            const rating = gInfo['rating']\n\n            if (typeof (lat) === \"number\") {\n                locMarkers.push(\n                    {\n                        name: name,\n                        rating: rating,\n                        geoLoc: [lat, lng]\n                    }\n                )\n            }\n        }\n    }\n    Markers()\n\n\n\n    return (\n        <div style={mapBoxStyle} className=\"map\">\n            <GoogleMapReact\n                bootstrapURLKeys={{ key: 'AIzaSyDtggfQvcGa_TB9YlG3vWRMKAe2Q4orUr8' }}\n                defaultCenter={center}\n                defaultZoom={zoom}\n            >\n\n                {locMarkers.map(ev => {\n                    // console.log(ev[0],ev[1])\n                    return <GymMarker ginfo={ev} lat={ev['geoLoc'][0]} lng={ev['geoLoc'][1]} />\n                })}\n\n            </GoogleMapReact>\n            {/* {locationInfo && <LocationInfoBox info={locationInfo} />} */}\n        </div>\n    )\n}\n\nGMap.defaultProps = {\n    center: {\n        lat: 38.54555438314078,\n        lng: -97.9853579502318\n    },\n    zoom: 5\n}\n\nexport default GMap","import React from 'react'\n\nexport default function InfoBar({gym_data}) {\n    // console.log(gym_data)\n    return (\n        <>\n        <div class=\"card\" >\n        <div class=\"card-body\">\n            <h3 class=\"card-title\">{gym_data.googleInfo.correct_name}</h3>\n            <p class=\"card-text\">{\"‚≠ê \".repeat(gym_data.googleInfo.rating)}</p>\n            <p class=\"card-text\">Address: {gym_data.gym_info[1]}</p>\n\n        </div>\n        </div>\n\n        </>\n    )\n}\n","import React from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport Result from './Result'\nimport GMap from './GMap';\nimport Infobar from './InfoBar'\nimport data from '../data.json'\n\nfunction UserForm() {\n    // const [eventData, setEventData] = useState([])\n    // const [loading, setLoading] = useState(false)\n\n    // useEffect(() => {\n    //     const fetchEvents = async () =>{\n    //         setLoading(true)\n    //         const res = await fetch(' http://127.0.0.1:8080/data.json')\n    //         const {locName} = await res.json()\n\n    //         setEventData(locName)\n    //         setLoading(false)\n    //     }\n\n    //     fetchEvents()\n    //     console.log(eventData)\n    // },[])\n\n    const panel_style = {\n        // position:\"fixed\",\n        position: \"relative\",\n        float: \"left\",\n        \"z-index\": \"3000\",\n        height: \"100vh\",\n        overflow: \"scroll\",\n        background: \"rgba(29, 53, 87, 0.9)\",\n        \"border-radius\": 0,\n        color: \"white\",\n        padding: \"25px\"\n    }\n    let avg_center = {\n        lat: 38.54555438314078,\n        lng: -97.9853579502318\n    }\n    const search_results = {}\n    const [search, setSearch] = useState('')\n    const [filtered_data, setfiltered_data] = useState({})\n    \n      \n    // When search value changes check for matches\n    useEffect(() => {\n        // return filtered out data Object to plug into map and infobox\n        Object.keys(data).map(key => {\n            // if state equals to search add to filtered data\n            if (search == data[key]['state']) {\n                search_results[key] = data[key]\n            }\n            else {\n                console.log('nothing to add')\n            }\n        })\n        setfiltered_data(search_results)\n    }, [search])\n\n    return (\n        <>\n            <div class=\"container-fluid\" >\n                <div class=\"row\" >\n\n                    <div class=\"col-sm-12 col-md-3 \" style={panel_style}>\n                        <input className=\"form-control\" type=\"text\" onChange={(e) => setSearch(e.target.value)}  placeholder=\"Search\"></input>\n                        {\n                        \n                            Object.keys(filtered_data).map(key => {\n                                return (\n                                    <Infobar gym_data={filtered_data[key]} />\n                                )\n                            })\n                        \n                        }\n                    </div>\n                    <div class=\"\" >\n                        <GMap eventData={filtered_data} center={avg_center}/>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default UserForm;","import React, {useState} from 'react'\nimport UserForm from './Components/Form'\n\n\nfunction App() {\n  \n  return (\n        <UserForm />\n      );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}